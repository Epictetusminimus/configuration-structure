; Root type
configuration = [
  ; harts
  [* hart],

  ; uncore
  uncore,
]

bitmask = uint

tuple = [
  ; value
  uint,

  ; mask
  bitmask,
]

triple = [
  ; low
  uint,

  ; high
  uint,

  ; mask
  bitmask,
]

debug_entry = [
  ; triggers
  flexible_range,

  ; matches
  [ * matches ],
]

matches = tuple / triple

debug_module_entry = [
  ; abstract_commands
  [ * matches ],

  ; connected_harts
  flexible_range,
]

isa_entry = 32 / 64 / 128

mode = "m" / "s" / "u"

satps = 39 / 48 / 57 / 64

priv_entry = [
  ; modes
  [ 1* mode ],

  ; epmp
  bool,

  ; satp
  [ * satps ],
]

fast_int_entry = [
  ; mmode_time_reg_addr
  uint,

  ; mmode_time_comp_reg_addr
  uint,
]

trace_entry = [
  ; branch_predictor_entries
  uint,

  ; jump_target_cache_entries
  uint,

  ; context_bus_width
  uint,
]

categories = [
  ; debug
  [ * debug_entry],

  ; debug_module
  debug_module_entry / null,

  ; isa
  [ * isa_entry ],

  ; priv
  priv_entry / null,

  ; fast_int
  fast_int_entry / null,

  ; trace
  trace_entry / null,
]

; Range
single = uint
multiple = [1* uint]  ; TODO: Could be packed into a bitmask
range = {
  ; start
  s: uint,

  ; end
  e: uint,
}
flexible_range = single / multiple / range

hart = [
  ; range
  flexible_range,

  ; properties
  categories,
]

uncore = categories
